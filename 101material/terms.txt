branches
---------

    master
    develop
    
the master branch is the actual origin reflecting a production ready state.
the develop branch is the ongoing next release version which nightly builds are based on and which
is being readied for next release. When it is completely stable the develop branch is merged
back into the master branch and it is tagged with a version release number.

additional branches are used often in development teams to organize the process
with the intent of eventually merging these branches back into the develop branch.
some examples are:


    Feature branches
    Release branches
    Hotfix branches

feature breanches track the development of and merging in of news features
and they merge only into the develop lane

hotfix branches relate to crucial bug fixes and often
involve the master branch. when fixed they need to be merged back into both the
master branch and the develop branch so that
the fix is included in the next release

the release branch is merged into develop and then master along
with its release number.



swim lanes
------------
method of visualizing direct contribution and keeping track of where you are in the process.
specifically a visual graphing process related to github contribution.
allows you to see if you are affecting anyone else if you change the history of the code,
which you should definitely avoid doing.
http://nvie.com/posts/a-successful-git-branching-model/




repositories
-----------------
repositories are based on clones of an "origin"
each developer pulls and pushes to origin
it is also possible to pull from sub repositories and form 
various scales of collaboration on the project.
Groups can merge together to tackle core features, and then push
to origin when they are done prior to
 returning to their own project focus the fature is completed.


pull requests
----------------
pull requests need tohave coherent, and brief descriptions and need to
each be limited to one thing.
its easier to ok pull requests if they are distinct segments of the work.
isolate minimum viable pull requests


commits
-----------------
http://justinhileman.info/article/changing-history/

A model commit message looks something like this:

Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: "Fix bug" and not "Fixed
bug."  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded by a
   single space, with blank lines in between, but conventions vary here

 - Use a hanging indent
 
 The summary line is critical. GitHub’s recent design changes enforce this brevity as well. 
 If you can’t find a way to summarize your commit in 50 characters or less, 
 you probably should make two commits instead.
 ---------------------------------------
 for GitHub flavored markup
 https://help.github.com/articles/github-flavored-markdown
